--=============================================================================
--	Filename	:	ack_proc.sql
--	Author		:	DB2 Team 
--	Date		:	OCT/10/2010
--  Description	:   it creates the ack procedure
--                  sequences 
--=============================================================================


CALL EDIDB2A.SP_UTIL_DROP( 'PROCEDURE EDIDB2A.SP_UTIL_INSRT_TA1_999_ACK')@

CREATE PROCEDURE EDIDB2A.SP_UTIL_INSRT_TA1_999_ACK ( 
IN P_SOURCESTRING	VARCHAR(3000), 
IN P_FILE_ID	BIGINT, 
IN P_DELIMITER	VARCHAR(1), 
IN P_TERMINATOR	VARCHAR(1), 
OUT P_ERR_CODE	INTEGER, 
OUT P_ERR_DESC	VARCHAR(75) ) 
LANGUAGE SQL MODIFIES SQL DATA
 BEGIN
 DECLARE SQLCODE INTEGER DEFAULT 000; 
 DECLARE v_SourceString VARCHAR(3000); 
 DECLARE v_rString VARCHAR(3000); 
 DECLARE v_SubString VARCHAR(3000); 
 DECLARE v_SubString1 VARCHAR(3000); 
 DECLARE v_SubString2 VARCHAR(3000); 
 DECLARE v_SubString3 VARCHAR(3000); 
 DECLARE v_SubString4 VARCHAR(3000); 
 DECLARE v_SubString5 VARCHAR(3000); 
 DECLARE v_SenderId VARCHAR(15); 
 DECLARE v_String VARCHAR(3000); 
 DECLARE v_Delimiter VARCHAR(1); 
 DECLARE v_Terminator VARCHAR(1); 
 DECLARE v_ISACNTLNUM VARCHAR(9); 
 DECLARE v_GSCNTLNUM VARCHAR(9); 
 DECLARE v_STCNTLNUM VARCHAR(9); 
 DECLARE v_TRAN_NUM VARCHAR(4); 
 DECLARE v_RecieverId VARCHAR(20); 
 DECLARE v_StringLength INTEGER; 
 DECLARE v_CLAIMCOUNT  VARCHAR(20);
 DECLARE v_m INTEGER DEFAULT 1; 
 DECLARE v_n INTEGER; 
 DECLARE v_sqlcode INTEGER ; 
 
 DECLARE EXIT HANDLER FOR SQLEXCEPTION 
	VALUES (sqlcode) INTO v_sqlcode; 
	
	 SET v_SourceString = P_SourceString; 
	 SET v_Delimiter = P_Delimiter; 
	 SET v_Terminator= P_Terminator; 
	 SET v_rString = REPLACE(v_SourceString,v_Terminator,'');--
	 SET v_n=(LENGTH(v_SourceString) - LENGTH(v_rString));--
	 
	 WHILE (v_m<=v_n) DO 	 
		 SET v_String	=SUBSTR(v_SourceString,1,(LOCATE(v_Terminator,v_SourceString)-1));--
		 SET v_ISACNTLNUM=SUBSTR(v_String,1,(LOCATE(v_Delimiter,v_String)-1));--
		 
		 SET v_StringLength=LENGTH(v_ISACNTLNUM);--
		 SET v_SubString=SUBSTR(v_String,v_StringLength+2);--
		 SET v_GSCNTLNUM =SUBSTR(v_SubString,1,(LOCATE(v_Delimiter,v_SubString)-1));--
		 
		 SET v_StringLength=LENGTH(v_GSCNTLNUM);--
		 SET v_Substring1=SUBSTR(v_Substring,v_StringLength+2);--
		 SET v_STCNTLNUM=SUBSTR(v_Substring1,1,(LOCATE(v_Delimiter,v_SubString1)-1));--
		 
		 SET v_StringLength=LENGTH(v_STCNTLNUM);
		 SET v_SubString2 = SUBSTR(v_Substring1,v_StringLength+2);--
		 SET v_CLAIMCOUNT = SUBSTR(v_SubString2,1,(Locate(v_Delimiter,v_SubString2)-1));--
		 
		 SET v_StringLength=LENGTH(v_CLAIMCOUNT);--
		 SET v_SubString3 = SUBSTR(v_SubString2 ,v_StringLength+2);--
		 SET v_SenderId= SUBSTR(v_SubString3,1,(Locate(v_Delimiter,v_SubString3)-1));--
		 
		 SET v_StringLength=LENGTH(v_SenderId);--
		 SET v_SubString4 = SUBSTR(v_SubString3,v_StringLength+2);--
		 SET v_TRAN_NUM= SUBSTR(v_SubString4,1,(Locate(v_Delimiter,v_SubString4)-1));--
		 
		 SET v_StringLength=LENGTH(v_TRAN_NUM);--
		 SET v_SubString5 = SUBSTR(v_SubString4,v_StringLength+2);--
		 SET v_RecieverId= v_SubString5;--
		 
		INSERT INTO EDIDB2A.T_OUT_ISA(ISA_CTRL_NUM,SNDR_ID,RECV_ID,TRAN_NUM,FILE_ID) VALUES(CAST(v_ISACNTLNUM AS INTEGER) ,v_SenderId ,v_RecieverId,v_TRAN_NUM,P_FILE_ID); 
		VALUES (sqlcode) INTO v_sqlcode; 
		IF (v_sqlcode <> 0) THEN 
			SET P_ERR_CODE = 39931001;
			SET P_ERR_DESC = 'DB2::SP_UTIL_INSRT_TA1_999_ACK:Failed Insert into T_OUT_ISA';	
			GOTO EXIT_PROC2; 
		END IF;
		INSERT INTO EDIDB2A.T_OUT_GS(ISA_CTRL_NUM,GS_CTRL_NUM,TRAN_NUM,FILE_ID) VALUES( CAST(v_ISACNTLNUM AS INTEGER) ,CAST(v_GSCNTLNUM AS INTEGER),v_TRAN_NUM,P_FILE_ID); 
		VALUES (sqlcode) INTO v_sqlcode; 
		IF (v_sqlcode <> 0) THEN 
			SET P_ERR_CODE = 39931002;
			SET P_ERR_DESC = 'DB2::SP_UTIL_INSRT_TA1_999_ACK:Failed Insert into T_OUT_GS';	
			GOTO EXIT_PROC2; 
		END IF;
		
		INSERT INTO EDIDB2A.T_OUT_ST(ISA_CTRL_NUM,GS_CTRL_NUM,ST_CTRL_NUM,TRAN_NUM,FILE_ID) VALUES(CAST(v_ISACNTLNUM AS INTEGER),CAST(v_GSCNTLNUM AS INTEGER),CAST(v_STCNTLNUM AS INTEGER),v_TRAN_NUM,P_FILE_ID); 
		VALUES (sqlcode) INTO v_sqlcode; 
		IF (v_sqlcode <> 0) THEN 
			SET P_ERR_CODE = 39931003;
			SET P_ERR_DESC = 'DB2::SP_UTIL_INSRT_TA1_999_ACK:Failed Insert into T_OUT_ST';	
			GOTO EXIT_PROC2; 
		END IF;
		SET v_StringLength=LENGTH(v_String);--
		SET v_SourceString=SUBSTR(v_SourceString,v_StringLength+2);--
	 
		SET v_m = v_m+1;-- 
	END WHILE;
	SET P_ERR_CODE = v_sqlcode ;
	SET P_ERR_DESC = 'DB2::SP_UTIL_INSRT_TA1_999_ACK:INSERT STMTS EXECUTE SUCCESSFULLY' ;
	
EXIT_PROC2:
	SET v_m = 0;
	
END@


CALL EDIDB2A.SP_UTIL_DROP( 'PROCEDURE EDIDB2A.SP_UTIL_OP_999_VALIDATE')@

CREATE PROCEDURE "EDIDB2A"."SP_UTIL_OP_999_VALIDATE" (
    IN "P_INPUTFILEID"	VARCHAR(15),
    IN "P_INPUTFILENAME" VARCHAR(100),
    IN "P_INPUTFILEROOTDIR" VARCHAR(100),
    IN "P_INPUTFILESUBROOT" VARCHAR(100),
    IN "P_ISASENDERID"	VARCHAR(15),
    IN "P_ISACNTLNUM"	VARCHAR(15),
    IN "P_SOURCESTRING"	VARCHAR(500),
    IN "P_STATUS"	VARCHAR(2),
    IN "P_DELIMITER"	VARCHAR(1),
    IN "P_TERMINATOR"	VARCHAR(1),
    OUT "P_ERR_CODE"	INTEGER,
    OUT "P_ERR_DESC"	VARCHAR(50),
    OUT "P_GS_CNTL_NUMS"	VARCHAR(100),
    OUT "P_ST_CNTL_NUMS"	VARCHAR(100),
    OUT "P_FILEPATH"	VARCHAR(100),
    OUT "P_FILENAME"	VARCHAR(50),
    OUT "P_TRANNUM" VARCHAR(5))
BEGIN

DECLARE v_ISASENDERID VARCHAR(15);
DECLARE v_SOURCESTRING VARCHAR(500);
DECLARE v_SSTRING VARCHAR(200);
DECLARE v_STRING VARCHAR(200);
DECLARE v_SUBSTRING VARCHAR(200);
DECLARE v_SUBSTRING1 VARCHAR(200);
DECLARE v_DELIMITER VARCHAR(1);
DECLARE v_TERMINATOR VARCHAR(1);
DECLARE v_ISACNTLNUM VARCHAR(15);
DECLARE v_GSCNTLNUM VARCHAR(15);
DECLARE v_GSACKCODE VARCHAR(1);
DECLARE v_STCNTLNUM VARCHAR(15);
DECLARE v_STACKCODE VARCHAR(1);
DECLARE v_LENGTH INTEGER;
DECLARE v_M INTEGER DEFAULT 1;
DECLARE v_N INTEGER;
DECLARE v_STRINGLENGTH INTEGER;
DECLARE v_SQLCODE INTEGER;
DECLARE v_FILEROOT VARCHAR(100);
DECLARE v_SUBROOT VARCHAR(100);
DECLARE v_FILENAME VARCHAR(50);
DECLARE v_GSCNTLNUMS VARCHAR(1000) DEFAULT '';
DECLARE v_STCNTLNUMS VARCHAR(1000) DEFAULT '';
DECLARE v_TRANTYPE VARCHAR(20);
DECLARE v_FILEID BIGINT;
DECLARE v_STATUS VARCHAR(2);
DECLARE v_GSINDEX INTEGER DEFAULT 0;
DECLARE v_STINDEX INTEGER DEFAULT 0;
DECLARE v_TEMPGSCTRL VARCHAR(2) DEFAULT '';
DECLARE v_INPUTFILEID VARCHAR(15);
DECLARE v_INPUTFILENAME VARCHAR(100);
DECLARE v_INPUTFILEROOTDIR VARCHAR(100);
DECLARE v_INPUTFILESUBROOT VARCHAR(100);
DECLARE v_filePath VARCHAR(300);
SET v_ISASENDERID = P_ISASENDERID;
SET v_ISACNTLNUM = P_ISACNTLNUM;
SET v_SOURCESTRING = P_SOURCESTRING;
SET v_DELIMITER = P_DELIMITER;
SET v_TERMINATOR= P_TERMINATOR;
SET v_STATUS = P_STATUS;


SET v_INPUTFILEID = P_INPUTFILEID;
SET v_INPUTFILENAME = P_INPUTFILENAME;
SET v_INPUTFILEROOTDIR = P_INPUTFILEROOTDIR;
SET v_INPUTFILESUBROOT = P_INPUTFILESUBROOT;
SET v_filePath = V_INPUTFILEROOTDIR || V_INPUTFILESUBROOT;




-- =============================================================
-- TO FIND THE NUMBER OF FIELD TERMINATORS
-- ============================================================
SET v_SSTRING = REPLACE(v_SOURCESTRING,v_TERMINATOR,'');--
SET v_N=(LENGTH(v_SOURCESTRING) - LENGTH(v_SSTRING));--
 --==============================================================
-- REPEAT LOOP FOR 'N' NUMBER OF OCCURENCES OF FIELD TERMINATOR
 --==============================================================
 
WHILE (v_M<=v_N) DO
	SET v_STRING = SUBSTR(v_SOURCESTRING,1,(LOCATE(v_TERMINATOR,v_SOURCESTRING)-1));
	SET v_GSCNTLNUM = SUBSTR(v_STRING,1,(LOCATE(v_DELIMITER,v_STRING)-1));
	SET v_LENGTH = LENGTH(v_GSCNTLNUM);
	SET v_SUBSTRING = SUBSTR(v_STRING,v_LENGTH+2);
	SET v_GSACKCODE = SUBSTR(v_SUBSTRING,1,(LOCATE(v_DELIMITER,v_SUBSTRING)-1));
	SET v_LENGTH = LENGTH(v_GSACKCODE);
	SET v_SUBSTRING1 =SUBSTR(v_SUBSTRING,v_LENGTH+2);
	SET v_STCNTLNUM = SUBSTR(v_SUBSTRING1,1,(LOCATE(v_DELIMITER,v_SUBSTRING1)-1));
	SET v_LENGTH = LENGTH(v_STCNTLNUM);
	SET v_STACKCODE = SUBSTR(v_SUBSTRING1,v_LENGTH+2,1);
	IF  v_STCNTLNUM = '' THEN
		UPDATE EDIDB2A.T_OUT_ST SET ACKN_STT_999 = v_GSACKCODE WHERE GS_CTRL_NUM = CAST(v_GSCNTLNUM AS INTEGER);
	ELSE 
   		UPDATE EDIDB2A.T_OUT_ST SET ACKN_STT_999 = v_STACKCODE WHERE ST_CTRL_NUM = CAST(v_STCNTLNUM AS INTEGER);
	END IF;
	UPDATE EDIDB2A.T_OUT_GS SET ACKN_STT_999 = v_GSACKCODE WHERE GS_CTRL_NUM = CAST(v_GSCNTLNUM AS INTEGER);
	IF v_GSCNTLNUM <> v_TEMPGSCTRL THEN
		IF v_GSACKCODE = 'R' AND v_GSINDEX <> 0  THEN 
	    	SET v_GSCNTLNUMS = v_GSCNTLNUMS || '|' || v_GSCNTLNUM ;
	    	
		ELSEIF v_GSACKCODE = 'R'  THEN
			SET v_GSCNTLNUMS = v_GSCNTLNUMS || v_GSCNTLNUM ;
			SET v_GSINDEX = v_GSINDEX + 1;
        END IF;
	END IF;		
	IF v_STACKCODE = 'R' AND v_STINDEX <> 0   THEN
		SET  v_STCNTLNUMS = v_STCNTLNUMS || '|' || v_STCNTLNUM ;
		SET v_STINDEX = v_STINDEX + 1;		       		
	ELSEIF v_STACKCODE = 'R'   THEN
		SET v_STCNTLNUMS = v_STCNTLNUMS || v_STCNTLNUM ;	
	    SET v_STINDEX = v_STINDEX + 1;			
	END IF;
SELECT FILE_ID,TRAN_NUM INTO v_FILEID,v_TRANTYPE FROM EDIDB2A.T_OUT_GS WHERE GS_CTRL_NUM = CAST(v_GSCNTLNUM AS INTEGER)FETCH FIRST 1 ROWS ONLY WITH UR;	 
--SELECT SUBSTR(v_tranType,1,3) INTO v_tranType FROM SYSIBM.SYSDUMMY1;
IF v_TRANTYPE = '837' THEN   
   UPDATE EDIDB2A.T_837_FILE_PCES_LOG SET FILE_STT_CD = v_STATUS WHERE FILE_ID = v_FILEID ;
   	
ELSEIF v_TRANTYPE = '834' THEN
   --UPDATE EDIDB2A.T_834_FILE_CTRL_LOG SET FILE_STT_CD = v_STATUS  WHERE FILE_ID = v_FILEID ;
   
	   
ELSEIF v_TRANTYPE = '835' THEN
   UPDATE EDIDB2A.T_835_FILE_PCES_LOG SET FILE_STT_CD = v_STATUS  WHERE FILE_ID = v_FILEID ;
   
ELSEIF v_TRANTYPE = '820' THEN
-- UPDATE EDIDB2A.T_820_FILE_CTRL_LOG SET FILE_STT_CD = v_STATUS  WHERE FILE_ID = v_FILEID ;
 END IF;	 
			SET v_STRINGLENGTH=LENGTH(v_STRING);--
	    SET v_SOURCESTRING=SUBSTR(v_SOURCESTRING,v_STRINGLENGTH+2);--
	 
	     SET v_M = v_M+1;
	    SET v_TEMPGSCTRL =  v_GSCNTLNUM ;
	
    END WHILE;
IF v_TRANTYPE = '837' THEN  
INSERT INTO T_837_FILE_PCES_LOG (FILE_ID,FILE_NME,FILE_ROOT_DTRY_TXT,FILE_SUB_DTRY_TXT)VALUES(CAST(v_INPUTFILEID AS BIGINT), v_INPUTFILENAME,v_INPUTFILEROOTDIR,v_INPUTFILESUBROOT);
   SELECT FILE_ROOT_DTRY_TXT,FILE_SUB_DTRY_TXT,FILE_NME INTO v_FILEROOT,v_SUBROOT,v_FILENAME  FROM T_837_FILE_PCES_LOG WHERE FILE_ID = v_FILEID ;
ELSEIF v_TRANTYPE = '834' THEN
--INSERT INTO T_834_FILE_CTRL_LOG (FILE_ID,FILE_PATH_TXT,FILE_NME) VALUES(CAST(v_INPUTFILEID AS BIGINT),v_filePath,v_INPUTFILENAME);
   --SELECT FILE_PATH_TXT,FILE_NME INTO v_FILEROOT,v_FILENAME FROM  T_834_FILE_CTRL_LOG WHERE FILE_ID= v_FILEID ;
ELSEIF v_TRANTYPE = '835' THEN
INSERT INTO T_835_FILE_PCES_LOG (FILE_ID,FILE_NME,FILE_ROOT_DTRY_TXT,FILE_SUB_DTRY_TXT) VALUES(CAST(v_INPUTFILEID AS BIGINT),v_INPUTFILENAME,v_INPUTFILEROOTDIR,v_INPUTFILESUBROOT);
   SELECT FILE_ROOT_DTRY_TXT,FILE_SUB_DTRY_TXT,FILE_NME INTO v_FILEROOT,v_SUBROOT,v_FILENAME FROM T_835_FILE_PCES_LOG WHERE FILE_ID = v_FILEID ;  		     
END IF;	 

SET P_GS_CNTL_NUMS = v_GSCNTLNUMS;
SET P_ST_CNTL_NUMS = v_STCNTLNUMS;
SET P_FILEPATH = v_FILEROOT || v_SUBROOT;
SET P_FILENAME = v_FILENAME;
SET P_TRANNUM =  v_TRANTYPE;	

END@


CALL EDIDB2A.SP_UTIL_DROP( 'PROCEDURE EDIDB2A.SP_UTIL_OP_TA1_VALIDATE')@

CREATE PROCEDURE "EDIDB2A"."SP_UTIL_OP_TA1_VALIDATE" (
    IN "P_FILEID"	VARCHAR(15),
    IN "P_INPUTFILENAME" VARCHAR(50),
    IN "P_INPUTROOTDIR" VARCHAR(100),
    IN "P_INPUTSUBDIR" VARCHAR(100),
    IN "P_SOURCESTRING"	VARCHAR(500),
    IN "P_SENDERID"	VARCHAR(20),
    IN "P_STATUS" VARCHAR(02),
    IN "P_DELIMITER"	VARCHAR(1),
    IN "P_TERMINATOR"	VARCHAR(1),
    OUT "P_ERR_CODE"	INTEGER,
    OUT "P_ERR_DESC"	VARCHAR(50),
    OUT "P_ISA_CNTL_NUMS"	VARCHAR(500),
    OUT "P_FILEPATH"	VARCHAR(100),
    OUT "P_FILENAME"	VARCHAR(50),
    OUT "P_TRANNUM" VARCHAR(5) )
  SPECIFIC "SQL100910020935500"
  LANGUAGE SQL
  NOT DETERMINISTIC
  EXTERNAL ACTION
  MODIFIES SQL DATA
  CALLED ON NULL INPUT
  INHERIT SPECIAL REGISTERS
BEGIN
DECLARE v_SenderId VARCHAR(20);
DECLARE v_SourceString VARCHAR(200);
DECLARE v_rString VARCHAR(200);
DECLARE v_String VARCHAR(200);
DECLARE v_Delimiter VARCHAR(1);
DECLARE v_Terminator VARCHAR(1);
DECLARE v_ISACNTLNUM VARCHAR(9);
DECLARE v_TA1ACK VARCHAR(1);
DECLARE v_StringLength INTEGER;
DECLARE v_m INTEGER DEFAULT 1;
DECLARE v_n INTEGER;
DECLARE v_fileId BIGINT;
DECLARE v_tranType VARCHAR(4);
DECLARE SQLCODE INTEGER DEFAULT 0;
DECLARE  v_ISACNTLNUMS VARCHAR(200) default '';
DECLARE  v_FileRoot VARCHAR(60);
DECLARE  v_SubRoot VARCHAR(60);
DECLARE  v_FileName VARCHAR(60);
DECLARE  v_TA1ACK1 VARCHAR(02);
DECLARE  v_Status VARCHAR(1);
DECLARE  v_InputFileId VARCHAR(15);
DECLARE  v_InputFileName  VARCHAR(50);
DECLARE  v_InputFileRoot  VARCHAR(100);
DECLARE  v_InputFileSub  VARCHAR(100);
DECLARE  v_File_Path  VARCHAR(100);
DECLARE  v_IsaControlNum VARCHAR(20)default ''; 

DECLARE EXIT HANDLER FOR SQLEXCEPTION
VALUES(SQLCODE) INTO P_ERR_CODE;

SET v_SourceString = P_SourceString;
SET v_Delimiter = P_Delimiter;
SET v_Terminator= P_Terminator;
SET v_SenderId = P_SENDERID;
SET v_Status = P_STATUS;
SET v_InputFileId = P_FILEID;
SET v_InputFileName = P_INPUTFILENAME;
SET v_InputFileRoot = P_INPUTROOTDIR;
SET v_InputFileSub = P_INPUTSUBDIR;
SET  v_File_Path = v_InputFileRoot || v_InputFileSub;        



-- =============================================================
-- TO FIND THE NUMBER OF FIELD TERMINATORS
-- ============================================================
SET v_rString = REPLACE(v_SourceString,v_Terminator,'');
SET v_n=(LENGTH(v_SourceString) - LENGTH(v_rString));
-- ==============================================================
-- REPEAT LOOP FOR 'n' NUMBER OF OCCURENCES OF FIELD TERMINATOR
-- ==============================================================
WHILE (v_m<=v_n)
DO
	SET v_String=SUBSTR(v_SourceString,1,(LOCATE(v_Terminator,v_SourceString)-1));
	SET v_ISACNTLNUM=SUBSTR(v_String,1,(LOCATE(v_Delimiter,v_String)-1));
	SET v_StringLength=LENGTH(v_ISACNTLNUM);
	SET v_TA1ACK=SUBSTR(v_String,v_StringLength+2);                       
  UPDATE EDIDB2A.T_OUT_ISA SET TA1_ACKN_STT = v_TA1ACK WHERE ISA_CTRL_NUM =CAST(v_ISACNTLNUM AS INTEGER);
 -- SET P_ERR_CODE = SQLCODE;
	
	IF v_TA1ACK = 'R' AND v_ISACNTLNUM <> v_IsaControlNum THEN  
	 SET  v_IsaControlNum = v_ISACNTLNUM ; 
	SET v_ISACNTLNUMS = v_ISACNTLNUMS || v_IsaControlNum || '|';
  END IF;
	
	SELECT FILE_ID,TRAN_NUM INTO v_fileId,v_tranType FROM EDIDB2A.T_OUT_ISA WHERE ISA_CTRL_NUM =CAST(v_ISACNTLNUM AS INTEGER) AND RECV_ID = P_SENDERID FETCH FIRST 1 ROWS ONLY WITH UR;
	SET P_ERR_CODE = SQLCODE ;
	--SELECT SUBSTR(v_tranType,1,3) INTO v_tranType FROM SYSIBM.SYSDUMMY1;
	IF v_TA1ACK = 'A' THEN 
	SET v_TA1ACK1 = '01';
	ELSEIF v_TA1ACK = 'R' THEN 
	SET v_TA1ACK1 = '03';
	END IF;
	
	
	IF v_tranType = '837' THEN
		UPDATE EDIDB2A.T_837_FILE_PCES_LOG SET FILE_STT_CD = v_Status WHERE FILE_ID = v_fileId ;
	     ELSEIF v_tranType = '834' THEN
		--UPDATE EDIDB2A.T_834_FILE_CTRL_LOG SET FILE_STT_CD = v_Status WHERE FILE_ID = v_fileId ;
	     ELSEIF v_tranType = '835' THEN
	      UPDATE EDIDB2A.T_835_FILE_PCES_LOG SET FILE_STT_CD = v_Status WHERE FILE_ID = v_fileId ;
    ELSEIF v_tranType = '820' THEN
	--UPDATE EDIDB2A.T_820_FILE_CTRL_LOG SET FILE_STT_CD = v_Status WHERE FILE_ID = v_fileId ;
	ELSE
	SET P_ERR_CODE = 100;
	SET P_ERR_DESC = 'Transaction Type Invalid';
	END IF;
	SET v_StringLength=LENGTH(v_String);
	SET v_SourceString=SUBSTR(v_SourceString,v_StringLength+2);
	SET v_m = v_m+1;
END WHILE;

IF v_tranType = '837' THEN
SELECT FILE_ROOT_DTRY_TXT,FILE_SUB_DTRY_TXT,FILE_NME INTO v_FileRoot,v_SubRoot,v_FileName  FROM T_837_FILE_PCES_LOG WHERE FILE_ID = v_fileId ;
INSERT INTO T_837_FILE_PCES_LOG (FILE_ID,FILE_NME,FILE_ROOT_DTRY_TXT,FILE_SUB_DTRY_TXT)VALUES(CAST (v_InputFileId AS BIGINT), v_InputFileName ,v_InputFileRoot,v_InputFileSub);

 ELSEIF v_tranType = '834' THEN                                                                                                       
--SELECT FILE_PATH_TXT,FILE_NME INTO v_FileRoot,v_FileName FROM  T_834_FILE_CTRL_LOG WHERE FILE_ID= v_fileId;
--INSERT INTO T_834_FILE_CTRL_LOG (FILE_ID,FILE_NME,FILE_PATH_TXT) VALUES(CAST (v_InputFileId AS BIGINT),v_InputFileName ,v_File_Path); 
ELSEIF v_tranType = '835' THEN
SELECT FILE_ROOT_DTRY_TXT,FILE_SUB_DTRY_TXT,FILE_NME INTO v_FileRoot,v_SubRoot,v_FileName FROM T_835_FILE_PCES_LOG WHERE FILE_ID = v_fileId;
INSERT INTO EDIDB2A.T_835_FILE_PCES_LOG  (FILE_ID,FILE_NME,FILE_ROOT_DTRY_TXT,FILE_SUB_DTRY_TXT) VALUES(CAST (v_InputFileId AS BIGINT), v_InputFileName ,v_InputFileRoot,v_InputFileSub);
ELSEIF v_tranType = '820' THEN
	END IF;
SET P_ISA_CNTL_NUMS = v_ISACNTLNUMS;
SET P_FILEPATH = v_FileRoot || v_SubRoot;
SET P_FILENAME = v_FileName;
SET P_TRANNUM =	 v_tranType;
END@

CALL EDIDB2A.SP_UTIL_DROP( 'PROCEDURE EDIDB2A.SP_UTIL_TEST')@

CREATE PROCEDURE EDIDB2A.SP_UTIL_TEST (
    IN  P_SOURCESTRING		VARCHAR(100),
    IN  P_FILE_ID			BIGINT,
    IN  P_DELIMITER			VARCHAR(1),
    IN  P_TERMINATOR		VARCHAR(1),
    OUT P_ERR_CODE 			INTEGER,
    OUT P_ERR_DESC			VARCHAR(50) )
  
  LANGUAGE SQL
  MODIFIES SQL DATA
  
BEGIN  
DECLARE SQLCODE INTEGER DEFAULT 000; 
DECLARE v_SourceString VARCHAR(100);
DECLARE v_rString VARCHAR(100);
DECLARE v_SubString VARCHAR(100);
DECLARE v_SubString1 VARCHAR(100);
DECLARE v_SubString2 VARCHAR(100);
DECLARE v_SubString3 VARCHAR(100);
DECLARE v_SubString4 VARCHAR(100);
DECLARE v_SenderId VARCHAR(15);
DECLARE v_String VARCHAR(100);
DECLARE v_Delimiter VARCHAR(1);
DECLARE v_Terminator VARCHAR(1);
DECLARE v_ISACNTLNUM VARCHAR(12);
DECLARE v_GSCNTLNUM VARCHAR(9);
DECLARE v_STCNTLNUM VARCHAR(9);
DECLARE v_TRAN_NUM VARCHAR(4);
DECLARE v_RecieverId VARCHAR(20);
DECLARE v_StringLength INTEGER;
DECLARE v_m INTEGER DEFAULT 1;
DECLARE v_n INTEGER;
DECLARE v_sqlcode INTEGER ;

--=============================================================================
--	Setup the EXIT handler for all SQL exceptions
--=============================================================================
	
DECLARE EXIT HANDLER FOR SQLEXCEPTION
VALUES (sqlcode) INTO v_sqlcode;

SET v_SourceString = P_SourceString;
SET v_Delimiter = P_Delimiter;
SET v_Terminator= P_Terminator;
-- ============================================================
-- TO FIND THE NUMBER OF FIELD TERMINATORS
-- ============================================================
SET v_rString = REPLACE(v_SourceString,v_Terminator,'');--
SET v_n=(LENGTH(v_SourceString) - LENGTH(v_rString));--
-- ==============================================================
-- REPEAT LOOP FOR 'n' NUMBER OF OCCURENCES OF FIELD TERMINATOR
-- ==============================================================
WHILE (v_m<=v_n)
DO
	SET v_String=SUBSTR(v_SourceString,1,(LOCATE(v_Terminator,v_SourceString)-1));--
	SET v_ISACNTLNUM=SUBSTR(v_String,1,(LOCATE(v_Delimiter,v_String)-1));--
	SET v_StringLength=LENGTH(v_ISACNTLNUM);--
	SET v_SubString=SUBSTR(v_String,v_StringLength+2);--
	SET v_GSCNTLNUM =SUBSTR(v_SubString,1,(LOCATE(v_Delimiter,v_SubString)-1));--
	SET v_StringLength=LENGTH(v_GSCNTLNUM);--
	SET v_Substring1=SUBSTR(v_Substring,v_StringLength+2);--
	SET v_STCNTLNUM=SUBSTR(v_Substring1,1,(LOCATE(v_Delimiter,v_SubString1)-1));--
      SET v_StringLength=LENGTH(v_STCNTLNUM);
      SET v_SubString2 = SUBSTR(v_Substring1,v_StringLength+2);--
      SET v_SenderId = SUBSTR(v_SubString2,1,(Locate(v_Delimiter,v_SubString2)-1));--
      SET v_StringLength=LENGTH(v_SenderId);--
      SET v_SubString3 = SUBSTR(v_SubString2 ,v_StringLength+2);--
      SET v_RecieverId= SUBSTR(v_SubString3,1,(Locate(v_Delimiter,v_SubString3)-1));--
      SET v_StringLength=LENGTH(v_RecieverId);--
      SET v_SubString4 = SUBSTR(v_SubString3,v_StringLength+2);--
      SET v_TRAN_NUM= SUBSTR(v_SubString4,1,(Locate(v_Delimiter,v_SubString4)-1));--
       
   INSERT INTO EDIDB2A.T_OUT_ISA(ISA_CTRL_NUM,SNDR_ID,RECV_ID,TRAN_NUM,FILE_ID) VALUES(CAST(v_ISACNTLNUM AS INTEGER) ,v_SenderId ,v_RecieverId,v_TRAN_NUM,P_FILE_ID);
  INSERT INTO EDIDB2A.T_OUT_GS(ISA_CTRL_NUM,GS_CTRL_NUM,TRAN_NUM,FILE_ID) VALUES( CAST(v_ISACNTLNUM AS INTEGER) ,CAST(v_GSCNTLNUM AS INTEGER),v_TRAN_NUM,P_FILE_ID);
  INSERT INTO EDIDB2A.T_OUT_ST(ISA_CTRL_NUM,GS_CTRL_NUM,ST_CTRL_NUM,TRAN_NUM,FILE_ID) VALUES(CAST(v_ISACNTLNUM AS INTEGER),CAST(v_GSCNTLNUM AS INTEGER),CAST(v_STCNTLNUM AS INTEGER),v_TRAN_NUM,P_FILE_ID);
      SET v_StringLength=LENGTH(v_String);--
	SET v_SourceString=SUBSTR(v_SourceString,v_StringLength+2);--
	SET v_m = v_m+1;-- 
END WHILE;
 SET P_ERR_CODE = v_sqlcode ;
 SET P_ERR_DESC = 'INSERT STMT EXECUTE SUCCESSFULLY' ;
END@

CALL EDIDB2A.SP_UTIL_DROP( 'PROCEDURE EDIDB2A.SP_UTIL_GET_TP_LIST_FOR_ACK_TX')@

CREATE PROCEDURE "EDIDB2A"."SP_UTIL_GET_TP_LIST_FOR_ACK_TX" (
    IN "P_BULKER_TYPE"	CHARACTER(1),
    OUT "P_TP_LIST"	VARCHAR(5000),
    OUT "P_ERR_CODE"	BIGINT,
    OUT "P_ERR_DESC"	VARCHAR(255) )
  SPECIFIC "SQL101015063723600"
  LANGUAGE SQL
  NOT DETERMINISTIC
  EXTERNAL ACTION
  MODIFIES SQL DATA
  CALLED ON NULL INPUT
  INHERIT SPECIAL REGISTERS
BEGIN 
DECLARE SQLCODE	INTEGER DEFAULT 000; 
DECLARE SQLERRMC VARCHAR(500) DEFAULT ''; 
DECLARE v_sqlcode INTEGER ; 
DECLARE v_TP_list VARCHAR(1000); 
DECLARE v_TP_ID VARCHAR(20); 
DECLARE v_TP_QLFR CHARACTER(2); 
DECLARE v_count_837 INTEGER; 
DECLARE v_count_835 INTEGER;
DECLARE DEST_CURSR_837  CURSOR FOR SELECT DISTINCT RECR_ID,RECR_QLFR FROM T_837_FILE_PCES_LOG WHERE RECR_ID IS NOT NULL AND FILE_TYPE_CD=P_BULKER_TYPE AND FILE_STT_CD='10'; 
DECLARE DEST_CURSR_835  CURSOR FOR SELECT DISTINCT RECR_ID,RECR_QLFR FROM T_835_FILE_PCES_LOG WHERE RECR_ID IS NOT NULL AND FILE_TYPE_CD=P_BULKER_TYPE AND FILE_STT_CD='10'; 
	DECLARE EXIT HANDLER FOR SQLEXCEPTION VALUES (SQLCODE,SQLERRMC) INTO v_sqlcode,P_ERR_DESC ; 
  SELECT COUNT(RECR_ID) INTO v_count_837 FROM (SELECT DISTINCT RECR_ID,RECR_QLFR FROM T_837_FILE_PCES_LOG WHERE RECR_ID IS NOT NULL AND FILE_TYPE_CD=P_BULKER_TYPE AND FILE_STT_CD='10' ); 
  SELECT COUNT(RECR_ID) INTO v_count_835 FROM (SELECT DISTINCT RECR_ID,RECR_QLFR FROM T_835_FILE_PCES_LOG WHERE RECR_ID IS NOT NULL AND FILE_TYPE_CD=P_BULKER_TYPE AND FILE_STT_CD='10' ); 
	SET v_sqlcode = SQLCODE; 
  SET P_ERR_CODE = 0;
	SET P_ERR_DESC = SQLERRMC; 
OPEN DEST_CURSR_837; 
  	SET v_TP_list= ' ';
	WHILE (v_count_837 > 0) DO 
		FETCH FROM DEST_CURSR_837 INTO v_TP_ID,v_TP_QLFR; 
 	 	SET v_sqlcode = SQLCODE; 
 	 	SET P_ERR_DESC = SQLERRMC; 
 	 	 SET v_TP_QLFR=	COALESCE (v_TP_QLFR,'');
		SET v_TP_list=v_TP_list||trim(v_TP_ID)||'#'|| trim(v_TP_QLFR) ||',';  
 	 	SET v_count_837=v_count_837-1; 
 	 END WHILE; 
 	 SET P_TP_LIST = v_TP_list || '~ '; 
CLOSE DEST_CURSR_837; 
  UPDATE T_837_FILE_PCES_LOG SET FILE_STT_CD = '11' WHERE RECR_ID IS NOT NULL AND FILE_TYPE_CD=P_BULKER_TYPE AND FILE_STT_CD='10' ; 
SET v_TP_list = P_TP_LIST ; 
OPEN DEST_CURSR_835; 
	WHILE (v_count_835 > 0) DO 
		FETCH FROM DEST_CURSR_835 INTO v_TP_ID,v_TP_QLFR; 
		SET v_sqlcode = SQLCODE; 
		SET P_ERR_DESC = SQLERRMC; 
	  SET v_TP_QLFR=	COALESCE (v_TP_QLFR, '');
		SET v_TP_list=v_TP_list||trim(v_TP_ID)||'#'|| trim(v_TP_QLFR) ||','; 
		SET v_count_835=v_count_835-1; 
	END WHILE; 
CLOSE DEST_CURSR_835; 
	SET P_TP_LIST = v_TP_list; 
  UPDATE T_835_FILE_PCES_LOG SET FILE_STT_CD = '11' WHERE RECR_ID IS NOT NULL AND FILE_TYPE_CD=P_BULKER_TYPE AND FILE_STT_CD='10' ; 
  SET v_sqlcode = SQLCODE; 
  SET P_ERR_DESC = SQLERRMC; 
IF v_sqlcode <> 0 AND v_sqlcode <> 100 THEN 
	  SET P_ERR_CODE = 39930001; 
ELSE 
	  SET P_ERR_CODE = 0; 
 END IF; 
END@

CALL EDIDB2A.SP_UTIL_DROP( 'PROCEDURE EDIDB2A.SP_UTIL_GET_ACK_FILE_NAMES_FOR_TX')@

CREATE PROCEDURE "EDIDB2A"."SP_UTIL_GET_ACK_FILE_NAMES_FOR_TX" (
    IN "P_TP_ID"	VARCHAR(20),
    IN "P_TP_QLFR"	CHARACTER(2),
    IN "P_TRAN_TYPE"	CHARACTER(3),
    IN "P_FILE_TYPE_CD"	CHARACTER(1),
    OUT "P_FILES_LIST"	CLOB(1M),
    OUT "P_ERR_CODE"	BIGINT,
    OUT "P_ERR_DESC"	VARCHAR(500) )
  SPECIFIC "SQL101015070544700"
  LANGUAGE SQL
  NOT DETERMINISTIC
  EXTERNAL ACTION
  MODIFIES SQL DATA
  CALLED ON NULL INPUT
  INHERIT SPECIAL REGISTERS
BEGIN 
DECLARE SQLCODE	INTEGER DEFAULT 000; 
DECLARE SQLERRMC VARCHAR(500) DEFAULT ''; 
DECLARE v_sqlcode INTEGER ; 
DECLARE v_837_count INTEGER; 
DECLARE v_835_count INTEGER; 
DECLARE v_file_name VARCHAR(30); 
DECLARE v_file_root_dir VARCHAR(30); 
DECLARE v_file_sub_dir VARCHAR(30); 
DECLARE FILES_LIST_837 CURSOR FOR SELECT FILE_NME,FILE_ROOT_DTRY_TXT,FILE_SUB_DTRY_TXT FROM T_837_FILE_PCES_LOG WHERE RECR_ID=P_TP_ID AND RECR_QLFR = P_TP_QLFR AND FILE_TYPE_CD=P_FILE_TYPE_CD AND FILE_STT_CD='11'; 
DECLARE FILES_LIST_835 CURSOR FOR SELECT FILE_NME,FILE_ROOT_DTRY_TXT,FILE_SUB_DTRY_TXT FROM T_837_FILE_PCES_LOG WHERE RECR_ID=P_TP_ID AND RECR_QLFR = P_TP_QLFR AND FILE_TYPE_CD=P_FILE_TYPE_CD AND FILE_STT_CD='11'; 
DECLARE EXIT HANDLER FOR SQLEXCEPTION VALUES (SQLCODE) INTO v_sqlcode ; 

	SELECT COUNT(FILE_NME) INTO v_837_count FROM T_837_FILE_PCES_LOG WHERE RECR_ID=P_TP_ID AND RECR_QLFR = P_TP_QLFR AND FILE_TYPE_CD=P_FILE_TYPE_CD AND FILE_STT_CD='11'; 
	SELECT COUNT(FILE_NME) INTO v_835_count FROM T_835_FILE_PCES_LOG WHERE RECR_ID=P_TP_ID AND RECR_QLFR = P_TP_QLFR AND FILE_TYPE_CD=P_FILE_TYPE_CD AND FILE_STT_CD='11'; 
	
  SET v_sqlcode = SQLCODE; 
  SET P_ERR_DESC = SQLERRMC; 
  SET P_FILES_LIST = ''; 
	
	IF P_TRAN_TYPE = '837' THEN
	OPEN FILES_LIST_837; 
	WHILE(v_837_count <> 0) DO 
	FETCH FROM FILES_LIST_837 INTO v_file_name,v_file_root_dir,v_file_sub_dir; 
  SET v_sqlcode = SQLCODE; 
  SET P_ERR_DESC = SQLERRMC; 
  SET P_FILES_LIST = P_FILES_LIST||v_file_root_dir||v_file_sub_dir||v_file_name||','; 
  SET v_837_count = v_837_count -1; 
  END WHILE; 
	CLOSE FILES_LIST_837; 
	UPDATE T_837_FILE_PCES_LOG SET FILE_STT_CD = '12' WHERE RECR_ID=P_TP_ID AND RECR_QLFR = P_TP_QLFR AND FILE_TYPE_CD=P_FILE_TYPE_CD AND FILE_STT_CD='11'; 
	ELSEIF P_TRAN_TYPE = '835' THEN
	OPEN FILES_LIST_835; 
	WHILE(v_835_count <> 0) 
	DO 
	FETCH FROM FILES_LIST_835 INTO v_file_name,v_file_root_dir,v_file_sub_dir; 
	SET v_sqlcode = SQLCODE; 
	SET P_ERR_DESC = SQLERRMC; 
	SET P_FILES_LIST = P_FILES_LIST||v_file_root_dir||v_file_sub_dir||v_file_name||','; 
	SET v_837_count = v_835_count -1; 
	END WHILE; 
	CLOSE FILES_LIST_835;
	UPDATE T_835_FILE_PCES_LOG SET FILE_STT_CD = '12' WHERE RECR_ID=P_TP_ID AND RECR_QLFR = P_TP_QLFR AND FILE_TYPE_CD=P_FILE_TYPE_CD AND FILE_STT_CD='11'; 
	END IF;
	
	IF v_sqlcode <> 0 AND v_sqlcode <> 100 THEN 
  SET P_ERR_CODE = 39930003; ELSE 
  SET P_ERR_CODE = 0; 
  END IF; 
	END@

